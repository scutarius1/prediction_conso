import streamlit as st
import pandas as pd
from datetime import datetime
import joblib
import os
import seaborn as sns
import plotly.express as px

# Titre de la page
st.title("Simulateur de Consommation Future")

st.markdown("<hr style='border: 2px solid #4CAF50;'>", unsafe_allow_html=True)
st.markdown('<h5 style="text-align: center; color: #4CAF50;">üîé Votre besoin de pr√©vision</h5>', unsafe_allow_html=True)

# Affichage des s√©lecteurs de date
# Cr√©ation de deux colonnes
col1, col2 = st.columns(2)
# Affichage des s√©lecteurs de date dans les colonnes
with col1:
    start_date = st.date_input("Date de d√©but", datetime.today(), key="start_date")
with col2:
    end_date = st.date_input("Date de fin", datetime.today(), key="end_date")

# Affichage du s√©lecteur de R√©gions
options = ["Auvergne-Rh√¥ne-Alpes", "Bourgogne-Franche-Comt√©",
           "Bretagne", "Centre-Val de Loire", "Grand Est", "Hauts-de-France",
           "Normandie", "Nouvelle-Aquitaine", "Occitanie", "Pays de la Loire",
           "Provence-Alpes-C√¥te d'Azur", "√éle-de-France"]
choix_liste = st.multiselect("S√©lectionnez la(les) R√©gion(s) :", options)

# Affichage du s√©lecteur de Mod√®le
selected_model = st.selectbox("S√©lectionnez le mod√®le entrain√© :", options= ["Random Forest", "XGBoost", "Prophet"])

# R√©cap
st.write(f"Vous avez choisi de simuler la consommation pour la p√©riode du {start_date} au {end_date}. Pour la (les) r√©gion(s) suivante(s) {choix_liste}")
st.markdown("<hr style='border: 2px solid #4CAF50;'>", unsafe_allow_html=True)


############################

# Chargement et pr√©traitement des donn√©es
df_future_temp = pd.read_csv("dataset_streamlit/Future_temp.csv", index_col=0)

# Conversion de la colonne 'time' en datetime
df_future_temp['time'] = pd.to_datetime(df_future_temp['time'])

# Renommage des colonnes
df_future_temp.rename(columns={'time': 'Date', 'region': 'R√©gion', 'C¬∞': 'TMoy (¬∞C)'}, inplace=True)

# Ajout des colonnes temporelles depuis l'index
df_future_temp['Ann√©e'] = df_future_temp['Date'].dt.year
df_future_temp['month'] = df_future_temp['Date'].dt.month
df_future_temp['day_of_week'] = df_future_temp['Date'].dt.dayofweek
df_future_temp['day_of_year'] = df_future_temp['Date'].dt.dayofyear
df_future_temp['week_of_year'] = df_future_temp['Date'].dt.isocalendar().week

df_future_temp = df_future_temp.set_index('Date')

# R√©organiser les colonnes (si n√©cessaire)
df_future_temp = df_future_temp[['R√©gion', 'TMoy (¬∞C)', 'Ann√©e', 'month', 'day_of_week', 'day_of_year', 'week_of_year']]

# Filtrage des donn√©es pour la p√©riode s√©lectionn√©e
df_filtered = df_future_temp[(df_future_temp.index >= pd.to_datetime(start_date)) & (df_future_temp.index <= pd.to_datetime(end_date))]

# V√©rification de la disponibilit√© des donn√©es
if df_filtered.empty:
    st.warning("‚ö†Ô∏è Aucune donn√©e disponible pour cette p√©riode. Essayez une autre date.")
else:
    predictions = []
    for region in choix_liste:
        df_region = df_filtered[df_filtered["R√©gion"] == region]

        if df_region.empty:
            st.warning(f"‚ö†Ô∏è Aucune donn√©e pour la r√©gion {region} sur cette p√©riode.")
            continue

        # S√©lection des variables explicatives
        features = ['TMoy (¬∞C)', 'Ann√©e', 'month', 'day_of_week', 'day_of_year', 'week_of_year']
        X_region = df_region[features]

        # Chargement du bon mod√®le en fonction du choix de l'utilisateur
        model_choices = {
            "Random Forest": "RF",
            "XGBoost": "XGB",
            "Prophet": "Prophet"
        }

        model_name = f"{model_choices[selected_model]}_{region}.joblib"
        #model_path = f"../Mod√©lisations_pr√©dictions/{model_name}"
        model_path = os.path.join("Mod√©lisations_pr√©dictions", model_name)
        print(f"Trying to load model from: {model_path}")

        try:
            model = joblib.load(model_path)
            preds = model.predict(X_region)

            # Ajout des pr√©dictions au DataFrame
            df_region["Consommation_Pr√©vue (MW)"] = preds
            predictions.append(df_region[["R√©gion", "Consommation_Pr√©vue (MW)"]])

        except FileNotFoundError:
            st.error(f"‚ùå Mod√®le non trouv√© pour la r√©gion {region}. V√©rifiez les fichiers.")

    # Affichage des r√©sultats

    if predictions:
        df_results = pd.concat(predictions)

        st.subheader("üìä R√©sultats de la pr√©diction (avec filtres)")

        #Affichage Graphique
        fig = px.line(df_results.reset_index(), x="Date", y="Consommation_Pr√©vue (MW)", color="R√©gion",
              title="Visualisation graphique interactive")
        
        # Centrer le titre et le mettre en vert
        fig.update_layout(
            title={
                'text': "üìä Visualisation graphique interactive",
                'x': 0.5,  # Centre horizontalement (0.0 √† 1.0)
                'y': 0.95, # Position verticale (ajuster si n√©cessaire)
                'xanchor': 'center',
                'yanchor': 'top',
                'font': {
                    'color': '#4CAF50'
                }
            }
        )
        st.plotly_chart(fig, use_container_width=True)

        # Affichage du DataFrame entier avec st.data_editor
        st.markdown('<h6 style="text-align: center; color: #4CAF50;">üìä Tableau exportable des r√©sulats</h6>', unsafe_allow_html=True)
        st.data_editor(
            df_results.reset_index(),  # on reset l'index pour avoir 'Date' comme colonne visible
            column_config={
                "Date": st.column_config.DateColumn("Date"),
                "Consommation_Pr√©vue (MW)": st.column_config.NumberColumn("Pr√©vision (MW)"),
                "R√©gion": st.column_config.TextColumn("R√©gion")
            },
            use_container_width=True,
            num_rows="dynamic",
            hide_index=True
        )

